{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70203,"databundleVersionId":8068726,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"There are some duplicate audio files in the train data, so we discard them. Data in train_audio is also filtered with Google-bird-vocalization-classifier: if the classifier’s max prediction doesn’t match with the primary label, the chunk is dropped (maybe there is no bird sound or it has a bad quality). If the classifier’s max prediction matches with the secondary label, we replace the primary label with the secondary label. Moreover, if the file has secondary labels, then we take the primary label with 0.5, and the remaining 0.5 is evenly distributed among the secondary labels. We also add pseudo labels obtained with Google classifier to the resulting labels with a coefficient of 0.05. The soundscapes are labeled with an ensemble of Google classifier, and our best models trained only with train_audio. Finally, if the sound is too short, we use cyclic padding.\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"Drop Duplicates: Using metadata and duration of the audio.\nDiscard Bad Chunks: Use GBVC, generate labels and match them with primary or secondary labels, discard if no match.\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nmetadata = pd.read_csv(\"/kaggle/input/birdclef-2024/train_metadata.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:29:26.057840Z","iopub.execute_input":"2025-05-19T20:29:26.058425Z","iopub.status.idle":"2025-05-19T20:29:26.639732Z","shell.execute_reply.started":"2025-05-19T20:29:26.058392Z","shell.execute_reply":"2025-05-19T20:29:26.638542Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"metadata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:29:31.423045Z","iopub.execute_input":"2025-05-19T20:29:31.423339Z","iopub.status.idle":"2025-05-19T20:29:31.455762Z","shell.execute_reply.started":"2025-05-19T20:29:31.423314Z","shell.execute_reply":"2025-05-19T20:29:31.454747Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"  primary_label secondary_labels      type  latitude  longitude  \\\n0        asbfly               []  ['call']   39.2297   118.1987   \n1        asbfly               []  ['song']   51.4030   104.6401   \n2        asbfly               []  ['song']   36.3319   127.3555   \n3        asbfly               []  ['call']   21.1697    70.6005   \n4        asbfly               []  ['call']   15.5442    73.7733   \n\n      scientific_name             common_name  \\\n0  Muscicapa dauurica  Asian Brown Flycatcher   \n1  Muscicapa dauurica  Asian Brown Flycatcher   \n2  Muscicapa dauurica  Asian Brown Flycatcher   \n3  Muscicapa dauurica  Asian Brown Flycatcher   \n4  Muscicapa dauurica  Asian Brown Flycatcher   \n\n                              author  \\\n0                     Matt Slaymaker   \n1                   Magnus Hellström   \n2                      Stuart Fisher   \n3                          vir joshi   \n4  Albert Lastukhin & Sergei Karpeev   \n\n                                             license  rating  \\\n0  Creative Commons Attribution-NonCommercial-Sha...     5.0   \n1  Creative Commons Attribution-NonCommercial-Sha...     2.5   \n2  Creative Commons Attribution-NonCommercial-Sha...     2.5   \n3  Creative Commons Attribution-NonCommercial-Sha...     4.0   \n4  Creative Commons Attribution-NonCommercial-Sha...     4.0   \n\n                                 url             filename  \n0  https://www.xeno-canto.org/134896  asbfly/XC134896.ogg  \n1  https://www.xeno-canto.org/164848  asbfly/XC164848.ogg  \n2  https://www.xeno-canto.org/175797  asbfly/XC175797.ogg  \n3  https://www.xeno-canto.org/207738  asbfly/XC207738.ogg  \n4  https://www.xeno-canto.org/209218  asbfly/XC209218.ogg  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>primary_label</th>\n      <th>secondary_labels</th>\n      <th>type</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>scientific_name</th>\n      <th>common_name</th>\n      <th>author</th>\n      <th>license</th>\n      <th>rating</th>\n      <th>url</th>\n      <th>filename</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>asbfly</td>\n      <td>[]</td>\n      <td>['call']</td>\n      <td>39.2297</td>\n      <td>118.1987</td>\n      <td>Muscicapa dauurica</td>\n      <td>Asian Brown Flycatcher</td>\n      <td>Matt Slaymaker</td>\n      <td>Creative Commons Attribution-NonCommercial-Sha...</td>\n      <td>5.0</td>\n      <td>https://www.xeno-canto.org/134896</td>\n      <td>asbfly/XC134896.ogg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>asbfly</td>\n      <td>[]</td>\n      <td>['song']</td>\n      <td>51.4030</td>\n      <td>104.6401</td>\n      <td>Muscicapa dauurica</td>\n      <td>Asian Brown Flycatcher</td>\n      <td>Magnus Hellström</td>\n      <td>Creative Commons Attribution-NonCommercial-Sha...</td>\n      <td>2.5</td>\n      <td>https://www.xeno-canto.org/164848</td>\n      <td>asbfly/XC164848.ogg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>asbfly</td>\n      <td>[]</td>\n      <td>['song']</td>\n      <td>36.3319</td>\n      <td>127.3555</td>\n      <td>Muscicapa dauurica</td>\n      <td>Asian Brown Flycatcher</td>\n      <td>Stuart Fisher</td>\n      <td>Creative Commons Attribution-NonCommercial-Sha...</td>\n      <td>2.5</td>\n      <td>https://www.xeno-canto.org/175797</td>\n      <td>asbfly/XC175797.ogg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>asbfly</td>\n      <td>[]</td>\n      <td>['call']</td>\n      <td>21.1697</td>\n      <td>70.6005</td>\n      <td>Muscicapa dauurica</td>\n      <td>Asian Brown Flycatcher</td>\n      <td>vir joshi</td>\n      <td>Creative Commons Attribution-NonCommercial-Sha...</td>\n      <td>4.0</td>\n      <td>https://www.xeno-canto.org/207738</td>\n      <td>asbfly/XC207738.ogg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>asbfly</td>\n      <td>[]</td>\n      <td>['call']</td>\n      <td>15.5442</td>\n      <td>73.7733</td>\n      <td>Muscicapa dauurica</td>\n      <td>Asian Brown Flycatcher</td>\n      <td>Albert Lastukhin &amp; Sergei Karpeev</td>\n      <td>Creative Commons Attribution-NonCommercial-Sha...</td>\n      <td>4.0</td>\n      <td>https://www.xeno-canto.org/209218</td>\n      <td>asbfly/XC209218.ogg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"import librosa\n\ndef get_duration_librosa(file_path):\n   audio_data, sample_rate = librosa.load(file_path)\n   duration = librosa.get_duration(y=audio_data, sr=sample_rate)\n   return duration","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:38:27.275764Z","iopub.execute_input":"2025-05-19T20:38:27.276088Z","iopub.status.idle":"2025-05-19T20:38:27.282049Z","shell.execute_reply.started":"2025-05-19T20:38:27.276063Z","shell.execute_reply":"2025-05-19T20:38:27.280839Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"import os\nimport pathlib\nfrom glob import glob\n\nos.getcwd()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:42:23.914028Z","iopub.execute_input":"2025-05-19T20:42:23.914395Z","iopub.status.idle":"2025-05-19T20:42:23.920555Z","shell.execute_reply.started":"2025-05-19T20:42:23.914309Z","shell.execute_reply":"2025-05-19T20:42:23.919545Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"'/kaggle/working'"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"def get_filename(path):\n    path_dirs = path.split(os.path.sep)\n    filename = \"/\".join(path_dirs[-2:])\n    return filename","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:52:23.500986Z","iopub.execute_input":"2025-05-19T20:52:23.501329Z","iopub.status.idle":"2025-05-19T20:52:23.507255Z","shell.execute_reply.started":"2025-05-19T20:52:23.501302Z","shell.execute_reply":"2025-05-19T20:52:23.505822Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"duration_df = {\n    \"filename\": [],\n    \"duration\": []\n}\nlabels = glob(\"/kaggle/input/birdclef-2024/train_audio/*\")\n\nfor label in tqdm(labels):\n    files = glob(f\"{label}/*\")\n    for filepath in files:\n        duration = get_duration_librosa(filepath)\n        filename = get_filename(filepath)\n        duration_df['filename'].append(filename)\n        duration_df['duration'].append(duration)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:59:42.597217Z","iopub.execute_input":"2025-05-19T20:59:42.597552Z","iopub.status.idle":"2025-05-19T21:36:49.964088Z","shell.execute_reply.started":"2025-05-19T20:59:42.597527Z","shell.execute_reply":"2025-05-19T21:36:49.962856Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 182/182 [37:07<00:00, 12.24s/it]  \n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"duration_data = pd.DataFrame(duration_df)\nduration_data.to_csv(\"/kaggle/working/durations.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T21:37:17.118861Z","iopub.execute_input":"2025-05-19T21:37:17.119198Z","iopub.status.idle":"2025-05-19T21:37:17.216650Z","shell.execute_reply.started":"2025-05-19T21:37:17.119170Z","shell.execute_reply":"2025-05-19T21:37:17.215668Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"tqdm?","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T20:57:00.153574Z","iopub.execute_input":"2025-05-19T20:57:00.153859Z","iopub.status.idle":"2025-05-19T20:57:00.205684Z","shell.execute_reply.started":"2025-05-19T20:57:00.153840Z","shell.execute_reply":"2025-05-19T20:57:00.204514Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[0;31mInit signature:\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0m__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m     \nDecorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.\n\nParameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar.\ntotal  : int or float, optional\n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. If float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no ETA, no progressbar).\n    If `gui` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\nleave  : bool, optional\n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n    If `None`, will leave only if `position` is `0`.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n    methods.  For encoding, see `write_bytes`.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\nmininterval  : float, optional\n    Minimum progress display update interval [default: 0.1] seconds.\nmaxinterval  : float, optional\n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts `miniters` to correspond to `mininterval`\n    after long display update lag. Only works if `dynamic_miniters`\n    or monitor thread is enabled.\nminiters  : int or float, optional\n    Minimum progress display update interval, in iterations.\n    If 0 and `dynamic_miniters`, will automatically adjust to equal\n    `mininterval` (more CPU efficient, good for tight loops).\n    If > 0, will skip display of specified number of iterations.\n    Tweak this and `mininterval` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\nascii  : bool or str, optional\n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters \" 123456789#\".\ndisable  : bool, optional\n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: it].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale `total` and `n`.\ndynamic_ncols  : bool, optional\n    If set, constantly alters `ncols` and `nrows` to the\n    environment (allowing for window resizes) [default: False].\nsmoothing  : float, optional\n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n        '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n        percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n        rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n        rate_inv, rate_inv_fmt, postfix, unit_divisor,\n        remaining, remaining_s, eta.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\ninitial  : int or float, optional\n    The initial counter value. Useful when restarting a progress\n    bar [default: 0]. If using float, consider specifying `{n:.3f}`\n    or similar in `bar_format`, or specifying `unit_scale`.\nposition  : int, optional\n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\npostfix  : dict or *, optional\n    Specify additional stats to display at the end of the bar.\n    Calls `set_postfix(**postfix)` if possible (dict).\nunit_divisor  : float, optional\n    [default: 1000], ignored unless `unit_scale` is True.\nwrite_bytes  : bool, optional\n    Whether to write bytes. If (default: False) will write unicode.\nlock_args  : tuple, optional\n    Passed to `refresh` for intermediate output\n    (initialisation, iterating, and updating).\nnrows  : int, optional\n    The screen height. If specified, hides nested bars outside this\n    bound. If unspecified, attempts to use environment height.\n    The fallback is 20.\ncolour  : str, optional\n    Bar colour (e.g. 'green', '#00ff00').\ndelay  : float, optional\n    Don't display until [default: 0] seconds have elapsed.\ngui  : bool, optional\n    WARNING: internal parameter - do not use.\n    Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n    matplotlib animations for a graphical output [default: False].\n\nReturns\n-------\nout  : decorated iterator.\n\u001b[0;31mFile:\u001b[0m           /usr/local/lib/python3.11/dist-packages/tqdm/std.py\n\u001b[0;31mType:\u001b[0m           type\n\u001b[0;31mSubclasses:\u001b[0m     tqdm_gui\n"},"metadata":{}}],"execution_count":68},{"cell_type":"markdown","source":"https://www.kaggle.com/code/robbynevels/bc24-google-bird-model-embeddings-predict-score?scriptVersionId=172204890&cellId=4","metadata":{}}]}